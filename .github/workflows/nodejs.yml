name: Test, Build & Publish

on:
  push:
    branches: '*'
    tags: '*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: npm install, build, and test
      run: |
        npm install
        ./node_modules/.bin/ember test
      env:
        CI: true

  ember-try:
    name: ember-try (${{ matrix.scenario }})
    needs: test
    runs-on: ubuntu-latest
    env:
      CI: 'true'
    strategy:
      matrix:
        scenario:
          - release
          - beta
          - canary
          - lts-3.8
          - lts-3.12
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Set up Volta
        uses: rwjblue/setup-volta@v1
      - name: Install dependencies (npm)
        run: |
          npm install
      - name: Setup ember-try scenario
        run: ./node_modules/.bin/ember try:one ember-${{ matrix.scenario }} --skip-cleanup --- cat package.json
      - name: Build
        run: ./node_modules/.bin/ember build --environment test
      - name: Run test
        run: ./node_modules/.bin/ember test

  deploy:
    needs: [test, ember-try]
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: npm install, build, and deploy docs
        run: |
          mkdir ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          npm install
          echo "deploying to $ADDON_DOCS_VERSION_PATH - ADDON_DOCS_UPDATE_LATEST: $ADDON_DOCS_UPDATE_LATEST"
          ADDON_DOCS_UPDATE_LATEST=false ./node_modules/.bin/ember deploy production
          ./node_modules/.bin/ember deploy production
        env:
          CI: true
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          ADDON_DOCS_VERSION_PATH: ${{github.ref}}
          ADDON_DOCS_UPDATE_LATEST: ${{startsWith(github.ref, 'refs/tags/v')}}
      - name: deploy npm
        if: github.ref == 'refs/heads/master'
        run: |
          version=$(cat package.json | jq -r '.version')
          TAG=v$version
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "tag exists";
          else
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
            npm publish || echo "already published"
          fi          
        env:
          NPM_TOKEN: "${{ secrets.NPM_TOKEN }}"
      - name: create tag
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ github.token }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_COMMIT: ${{ github.sha }}
        run: |
          version=$(cat package.json | jq -r '.version')
          TAG=v$version
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "tag exists";
          else
            curl -X POST -H "Content-Type: application/json" -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/patricklx/carbon-components-ember/git/refs -d @- << EOF         
            {
              "ref": "refs/tags/$TAG",
              "sha": "$GITHUB_COMMIT"
            }
            EOF
          fi
      - name: Create a Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=$(cat package.json | jq -r '.version')
          TAG=v$version
          url="https://api.github.com/repos/patricklx/carbon-components-ember/releases"
          exists=$(curl -H "Content-Type: application/json" -H "Authorization: token $GITHUB_TOKEN" $url | jq ".[] | select(.tag_name == \"$TAG\") | .id")
          if [[ -z $exists ]]; then
            curl -X POST -H "Content-Type: application/json" -H "Authorization: token $GITHUB_TOKEN" $url -d "{ "tag_name": "$TAG", "name": "$TAG", "body": "", "draft": false, "prerelease": false}"
          else
            echo "release already exists";
          fi;
