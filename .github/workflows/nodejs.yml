name: Test, Build & Publish

on:
  create:
    tags: '**'
  push:
    branches: '**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.4.0
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 16.x
    - name: npm install, build, and test
      run: |
        npm install --no-audit
        ./node_modules/.bin/glint
        ./node_modules/.bin/tsc
        ./node_modules/.bin/ember test
      env:
        CI: true

  ember-try:
    name: ember-try (${{ matrix.scenario }})
    needs: test
    timeout-minutes: 15
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    env:
      CI: 'true'
    strategy:
      fail-fast: false
      matrix:
        experimental: [false]
        glint: [false]
        scenario:
          - release
        include:
          - scenario: release
            glint: true
            experimental: true
          - scenario: beta
            experimental: true
          - scenario: canary
            experimental: true
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Set up Volta
        uses: rwjblue/setup-volta@v1
      - name: Install dependencies (npm)
        run: |
          npm install --no-audit
          (${{matrix.glint}}) && ./node_modules/.bin/glint
          ./node_modules/.bin/tsc
      - name: Setup ember-try scenario
        run: ./node_modules/.bin/ember try:one ember-${{ matrix.scenario }} --skip-cleanup --- cat package.json
      - name: Build
        run: ./node_modules/.bin/tsc && ./node_modules/.bin/ember build --environment test
      - name: Run test
        run: ./node_modules/.bin/ember test

  deploy:
    needs: [test, ember-try]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: npm install, build, and deploy docs
        run: |
          mkdir ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          npm install --no-audit
          ./node_modules/.bin/tsc
          version=$(cat package.json | jq -r '.version')
          TAG=v$version
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "tag exists";
          else
            ADDON_DOCS_UPDATE_LATEST=false ADDON_DOCS_VERSION_PATH=$TAG ./node_modules/.bin/ember deploy production
            ADDON_DOCS_UPDATE_LATEST=true ADDON_DOCS_VERSION_PATH=$TAG ./node_modules/.bin/ember deploy production
          fi
          ADDON_DOCS_UPDATE_LATEST=false ADDON_DOCS_VERSION_PATH=master ./node_modules/.bin/ember deploy production
        env:
          CI: true
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      - name: deploy npm
        if: github.ref == 'refs/heads/master'
        run: |
          version=$(cat package.json | jq -r '.version')
          TAG=v$version
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "tag exists";
          else
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
            npm publish || echo "already published"
          fi
        env:
          NPM_TOKEN: "${{ secrets.NPM_TOKEN }}"
      - name: create tag
        if: github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ github.token }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_COMMIT: ${{ github.sha }}
        run: |
          version=$(cat package.json | jq -r '.version')
          TAG=v$version
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "tag exists";
          else
            curl -X POST -H "Content-Type: application/json" -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/patricklx/carbon-components-ember/git/refs -d "{ \"ref\": \"refs/tags/$TAG\", \"sha\": \"$GITHUB_COMMIT\" }"
          fi
      - name: Create a Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=$(cat package.json | jq -r '.version')
          TAG=v$version
          url="https://api.github.com/repos/patricklx/carbon-components-ember/releases"
          exists=$(curl -H "Content-Type: application/json" -H "Authorization: token $GITHUB_TOKEN" $url | jq ".[] | select(.tag_name == \"$TAG\") | .id")
          if [[ -z $exists ]]; then
            npm i -g lerna-changelog
            export GITHUB_AUTH=$GITHUB_TOKEN
            changelog=$(lerna-changelog)
            curl -X POST -H "Content-Type: application/json" -H "Authorization: token $GITHUB_TOKEN" $url -d "{ \"tag_name\": \"$TAG\", \"name\": \"$TAG\", \"body\": \"$changelog\", \"draft\": false, \"prerelease\": false}"
          else
            echo "release already exists";
          fi;
